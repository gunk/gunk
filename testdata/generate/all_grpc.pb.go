// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package util

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	imported "testdata.tld/util/imported"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UtilClient is the client API for Util service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilClient interface {
	// Echo echoes a message.
	Echo(ctx context.Context, in *imported.Message, opts ...grpc.CallOption) (*imported.Message, error)
	// CheckStatus sends the server health status.
	CheckStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type utilClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilClient(cc grpc.ClientConnInterface) UtilClient {
	return &utilClient{cc}
}

func (c *utilClient) Echo(ctx context.Context, in *imported.Message, opts ...grpc.CallOption) (*imported.Message, error) {
	out := new(imported.Message)
	err := c.cc.Invoke(ctx, "/testdata.v1.util.Util/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilClient) CheckStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, "/testdata.v1.util.Util/CheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilServer is the server API for Util service.
// All implementations must embed UnimplementedUtilServer
// for forward compatibility
type UtilServer interface {
	// Echo echoes a message.
	Echo(context.Context, *imported.Message) (*imported.Message, error)
	// CheckStatus sends the server health status.
	CheckStatus(context.Context, *emptypb.Empty) (*CheckStatusResponse, error)
	mustEmbedUnimplementedUtilServer()
}

// UnimplementedUtilServer must be embedded to have forward compatible implementations.
type UnimplementedUtilServer struct {
}

func (UnimplementedUtilServer) Echo(context.Context, *imported.Message) (*imported.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Echo not implemented")
}
func (UnimplementedUtilServer) CheckStatus(context.Context, *emptypb.Empty) (*CheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckStatus not implemented")
}
func (UnimplementedUtilServer) mustEmbedUnimplementedUtilServer() {}

// UnsafeUtilServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilServer will
// result in compilation errors.
type UnsafeUtilServer interface {
	mustEmbedUnimplementedUtilServer()
}

func RegisterUtilServer(s grpc.ServiceRegistrar, srv UtilServer) {
	s.RegisterService(&Util_ServiceDesc, srv)
}

func _Util_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(imported.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.v1.util.Util/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).Echo(ctx, req.(*imported.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Util_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.v1.util.Util/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).CheckStatus(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Util_ServiceDesc is the grpc.ServiceDesc for Util service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Util_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.v1.util.Util",
	HandlerType: (*UtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Util_Echo_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _Util_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata.tld/util/all.proto",
}

// UtilTestsClient is the client API for UtilTests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilTestsClient interface {
	UtilTest(ctx context.Context, in *UtilTestRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type utilTestsClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilTestsClient(cc grpc.ClientConnInterface) UtilTestsClient {
	return &utilTestsClient{cc}
}

func (c *utilTestsClient) UtilTest(ctx context.Context, in *UtilTestRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, "/testdata.v1.util.UtilTests/UtilTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilTestsServer is the server API for UtilTests service.
// All implementations must embed UnimplementedUtilTestsServer
// for forward compatibility
type UtilTestsServer interface {
	UtilTest(context.Context, *UtilTestRequest) (*CheckStatusResponse, error)
	mustEmbedUnimplementedUtilTestsServer()
}

// UnimplementedUtilTestsServer must be embedded to have forward compatible implementations.
type UnimplementedUtilTestsServer struct {
}

func (UnimplementedUtilTestsServer) UtilTest(context.Context, *UtilTestRequest) (*CheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UtilTest not implemented")
}
func (UnimplementedUtilTestsServer) mustEmbedUnimplementedUtilTestsServer() {}

// UnsafeUtilTestsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilTestsServer will
// result in compilation errors.
type UnsafeUtilTestsServer interface {
	mustEmbedUnimplementedUtilTestsServer()
}

func RegisterUtilTestsServer(s grpc.ServiceRegistrar, srv UtilTestsServer) {
	s.RegisterService(&UtilTests_ServiceDesc, srv)
}

func _UtilTests_UtilTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilTestsServer).UtilTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.v1.util.UtilTests/UtilTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilTestsServer).UtilTest(ctx, req.(*UtilTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilTests_ServiceDesc is the grpc.ServiceDesc for UtilTests service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilTests_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.v1.util.UtilTests",
	HandlerType: (*UtilTestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UtilTest",
			Handler:    _UtilTests_UtilTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata.tld/util/all.proto",
}
