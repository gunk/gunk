// Code generated by protoc-gen-go. DO NOT EDIT.
// source: testdata.tld/util/echo.gunk

package util

/*
package util contains a simple Echo service.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import duration "github.com/golang/protobuf/ptypes/duration"
import empty "github.com/golang/protobuf/ptypes/empty"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import _ "github.com/gunk/opt/http"
import imported "testdata.tld/util/imported"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// CheckStatusResponse is the response for a check status.
type CheckStatusResponse struct {
	Status               Status   `protobuf:"varint,1,opt,name=Status,json=status,proto3,enum=testdata.v1.util.Status" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckStatusResponse) Reset()         { *m = CheckStatusResponse{} }
func (m *CheckStatusResponse) String() string { return proto.CompactTextString(m) }
func (*CheckStatusResponse) ProtoMessage()    {}
func (*CheckStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_679860292f71928d, []int{0}
}
func (m *CheckStatusResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckStatusResponse.Unmarshal(m, b)
}
func (m *CheckStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckStatusResponse.Marshal(b, m, deterministic)
}
func (dst *CheckStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckStatusResponse.Merge(dst, src)
}
func (m *CheckStatusResponse) XXX_Size() int {
	return xxx_messageInfo_CheckStatusResponse.Size(m)
}
func (m *CheckStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckStatusResponse proto.InternalMessageInfo

func (m *CheckStatusResponse) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Unknown
}

type UtilTestRequest struct {
	Ints                 []int32                        `protobuf:"varint,1,rep,packed,name=Ints,proto3" json:"Ints,omitempty"`
	Structs              []*imported.Message            `protobuf:"bytes,2,rep,name=Structs,proto3" json:"Structs,omitempty"`
	Bool                 bool                           `protobuf:"varint,3,opt,name=Bool,proto3" json:"Bool,omitempty"`
	Int32                int32                          `protobuf:"varint,4,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Timestamp            *timestamp.Timestamp           `protobuf:"bytes,5,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	Duration             *duration.Duration             `protobuf:"bytes,6,opt,name=Duration,proto3" json:"Duration,omitempty"`
	MapSimple            map[string]int32               `protobuf:"bytes,7,rep,name=MapSimple,proto3" json:"MapSimple,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	MapComplex           map[int32]*CheckStatusResponse `protobuf:"bytes,8,rep,name=MapComplex,proto3" json:"MapComplex,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *UtilTestRequest) Reset()         { *m = UtilTestRequest{} }
func (m *UtilTestRequest) String() string { return proto.CompactTextString(m) }
func (*UtilTestRequest) ProtoMessage()    {}
func (*UtilTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_echo_679860292f71928d, []int{1}
}
func (m *UtilTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UtilTestRequest.Unmarshal(m, b)
}
func (m *UtilTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UtilTestRequest.Marshal(b, m, deterministic)
}
func (dst *UtilTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UtilTestRequest.Merge(dst, src)
}
func (m *UtilTestRequest) XXX_Size() int {
	return xxx_messageInfo_UtilTestRequest.Size(m)
}
func (m *UtilTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UtilTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UtilTestRequest proto.InternalMessageInfo

func (m *UtilTestRequest) GetInts() []int32 {
	if m != nil {
		return m.Ints
	}
	return nil
}

func (m *UtilTestRequest) GetStructs() []*imported.Message {
	if m != nil {
		return m.Structs
	}
	return nil
}

func (m *UtilTestRequest) GetBool() bool {
	if m != nil {
		return m.Bool
	}
	return false
}

func (m *UtilTestRequest) GetInt32() int32 {
	if m != nil {
		return m.Int32
	}
	return 0
}

func (m *UtilTestRequest) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *UtilTestRequest) GetDuration() *duration.Duration {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *UtilTestRequest) GetMapSimple() map[string]int32 {
	if m != nil {
		return m.MapSimple
	}
	return nil
}

func (m *UtilTestRequest) GetMapComplex() map[int32]*CheckStatusResponse {
	if m != nil {
		return m.MapComplex
	}
	return nil
}

func init() {
	proto.RegisterType((*CheckStatusResponse)(nil), "testdata.v1.util.CheckStatusResponse")
	proto.RegisterType((*UtilTestRequest)(nil), "testdata.v1.util.UtilTestRequest")
	proto.RegisterMapType((map[int32]*CheckStatusResponse)(nil), "testdata.v1.util.UtilTestRequest.MapComplexEntry")
	proto.RegisterMapType((map[string]int32)(nil), "testdata.v1.util.UtilTestRequest.MapSimpleEntry")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UtilClient is the client API for Util service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilClient interface {
	// Echo echoes a message.
	Echo(ctx context.Context, in *imported.Message, opts ...grpc.CallOption) (*imported.Message, error)
	// CheckStatus sends the server health status.
	CheckStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type utilClient struct {
	cc *grpc.ClientConn
}

func NewUtilClient(cc *grpc.ClientConn) UtilClient {
	return &utilClient{cc}
}

func (c *utilClient) Echo(ctx context.Context, in *imported.Message, opts ...grpc.CallOption) (*imported.Message, error) {
	out := new(imported.Message)
	err := c.cc.Invoke(ctx, "/testdata.v1.util.Util/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilClient) CheckStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, "/testdata.v1.util.Util/CheckStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilServer is the server API for Util service.
type UtilServer interface {
	// Echo echoes a message.
	Echo(context.Context, *imported.Message) (*imported.Message, error)
	// CheckStatus sends the server health status.
	CheckStatus(context.Context, *empty.Empty) (*CheckStatusResponse, error)
}

func RegisterUtilServer(s *grpc.Server, srv UtilServer) {
	s.RegisterService(&_Util_serviceDesc, srv)
}

func _Util_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(imported.Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.v1.util.Util/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).Echo(ctx, req.(*imported.Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Util_CheckStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilServer).CheckStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.v1.util.Util/CheckStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilServer).CheckStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Util_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.v1.util.Util",
	HandlerType: (*UtilServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Util_Echo_Handler,
		},
		{
			MethodName: "CheckStatus",
			Handler:    _Util_CheckStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata.tld/util/echo.gunk",
}

// UtilTestsClient is the client API for UtilTests service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UtilTestsClient interface {
	UtilTest(ctx context.Context, in *UtilTestRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error)
}

type utilTestsClient struct {
	cc *grpc.ClientConn
}

func NewUtilTestsClient(cc *grpc.ClientConn) UtilTestsClient {
	return &utilTestsClient{cc}
}

func (c *utilTestsClient) UtilTest(ctx context.Context, in *UtilTestRequest, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, "/testdata.v1.util.UtilTests/UtilTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilTestsServer is the server API for UtilTests service.
type UtilTestsServer interface {
	UtilTest(context.Context, *UtilTestRequest) (*CheckStatusResponse, error)
}

func RegisterUtilTestsServer(s *grpc.Server, srv UtilTestsServer) {
	s.RegisterService(&_UtilTests_serviceDesc, srv)
}

func _UtilTests_UtilTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UtilTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilTestsServer).UtilTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testdata.v1.util.UtilTests/UtilTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilTestsServer).UtilTest(ctx, req.(*UtilTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UtilTests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testdata.v1.util.UtilTests",
	HandlerType: (*UtilTestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UtilTest",
			Handler:    _UtilTests_UtilTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdata.tld/util/echo.gunk",
}

func init() { proto.RegisterFile("testdata.tld/util/echo.gunk", fileDescriptor_echo_679860292f71928d) }

var fileDescriptor_echo_679860292f71928d = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xcb, 0x8e, 0xd3, 0x30,
	0x14, 0x55, 0xfa, 0x9a, 0xf6, 0x96, 0x79, 0xc8, 0x23, 0xa1, 0x90, 0x41, 0x50, 0x82, 0x90, 0x22,
	0x10, 0xce, 0x34, 0x65, 0x81, 0x66, 0x39, 0xa5, 0x42, 0xb3, 0xe8, 0x66, 0x5a, 0x24, 0xc4, 0x02,
	0xc9, 0x4d, 0x4d, 0x1b, 0x35, 0x89, 0x4d, 0x7d, 0x53, 0xd1, 0x2d, 0xbf, 0xc0, 0x67, 0xb1, 0xe4,
	0x17, 0xe0, 0x3f, 0x90, 0xdd, 0xa6, 0xaa, 0x12, 0x24, 0xb2, 0x49, 0xe2, 0x7b, 0xcf, 0x39, 0x3e,
	0x3e, 0x37, 0x86, 0x2b, 0xe4, 0x0a, 0xe7, 0x0c, 0x19, 0xc5, 0x78, 0xee, 0x67, 0x18, 0xc5, 0x3e,
	0x0f, 0x97, 0x82, 0x2e, 0xb2, 0x74, 0x45, 0x2e, 0x0e, 0xcd, 0x4d, 0x9f, 0xea, 0x9e, 0x73, 0xb5,
	0x10, 0x62, 0x11, 0x73, 0x5f, 0xae, 0x05, 0x8a, 0x59, 0xf6, 0xc5, 0xe7, 0x89, 0xc4, 0x2d, 0x35,
	0x4b, 0xe7, 0x69, 0xb1, 0x89, 0x51, 0xc2, 0x15, 0xb2, 0x44, 0xee, 0x01, 0x4f, 0x8a, 0x80, 0x79,
	0xb6, 0x66, 0x18, 0x89, 0x74, 0xdf, 0x7f, 0x5c, 0x36, 0x83, 0x5b, 0xc9, 0x95, 0x71, 0xe3, 0xb8,
	0x8b, 0x08, 0x97, 0xd9, 0x8c, 0x86, 0x22, 0xf1, 0x75, 0xc1, 0x17, 0x12, 0xfd, 0x25, 0xa2, 0x34,
	0x8f, 0x1d, 0xe6, 0x79, 0x59, 0x21, 0x4a, 0xa4, 0x58, 0x23, 0x9f, 0xeb, 0x0f, 0x03, 0x72, 0xdf,
	0xc3, 0xe5, 0x70, 0xc9, 0xc3, 0xd5, 0x04, 0x19, 0x66, 0xea, 0x9e, 0x2b, 0x29, 0x52, 0xc5, 0xc9,
	0x35, 0xb4, 0x76, 0x15, 0xdb, 0xea, 0x59, 0xde, 0x59, 0x60, 0xd3, 0xe2, 0xf1, 0xe9, 0x9e, 0xd1,
	0x52, 0xe6, 0xed, 0xfe, 0xa9, 0xc3, 0xf9, 0x07, 0x8c, 0xe2, 0x29, 0x57, 0x78, 0xcf, 0xbf, 0x66,
	0x5c, 0x21, 0x79, 0x00, 0x8d, 0xbb, 0x14, 0xb5, 0x46, 0xdd, 0x6b, 0x92, 0x01, 0x9c, 0x4c, 0x70,
	0x9d, 0x85, 0xa8, 0xec, 0x5a, 0xaf, 0xee, 0x75, 0x03, 0xb7, 0x2c, 0x9a, 0x1b, 0xa4, 0x63, 0xae,
	0x14, 0x5b, 0x70, 0x2d, 0x71, 0x2b, 0x44, 0x6c, 0xd7, 0x7b, 0x96, 0xd7, 0x26, 0xa7, 0xd0, 0xbc,
	0x4b, 0x71, 0x10, 0xd8, 0x8d, 0x9e, 0xe5, 0x35, 0xc9, 0x6b, 0xe8, 0x4c, 0xf3, 0x58, 0xed, 0x66,
	0xcf, 0xf2, 0xba, 0x81, 0x43, 0x77, 0xb9, 0xd2, 0x3c, 0x57, 0x7a, 0x40, 0x90, 0x57, 0xd0, 0x7e,
	0xb7, 0x0f, 0xd9, 0x6e, 0x19, 0xf4, 0xa3, 0x12, 0x3a, 0x07, 0x90, 0x21, 0x74, 0xc6, 0x4c, 0x4e,
	0xa2, 0x44, 0xc6, 0xdc, 0x3e, 0x31, 0x7e, 0xaf, 0xcb, 0x7e, 0x0b, 0x27, 0xa6, 0x07, 0xca, 0x28,
	0xc5, 0xf5, 0x96, 0x8c, 0x00, 0xc6, 0x4c, 0x0e, 0x85, 0xae, 0x7c, 0xb3, 0xdb, 0x46, 0xa5, 0x5f,
	0x49, 0x65, 0xcf, 0x31, 0x32, 0xce, 0x35, 0x9c, 0x15, 0x84, 0xbb, 0x50, 0x5f, 0xf1, 0xad, 0x19,
	0x4e, 0x47, 0xa7, 0xb2, 0x61, 0x71, 0xc6, 0xed, 0x9a, 0x4e, 0xe5, 0xa6, 0xf6, 0xd6, 0x72, 0x3e,
	0xc2, 0x79, 0x41, 0xe4, 0x98, 0xd2, 0x24, 0x6f, 0x8e, 0x29, 0xdd, 0xe0, 0x45, 0xd9, 0xd3, 0x3f,
	0xfe, 0x0a, 0xad, 0x1c, 0xfc, 0xb4, 0xa0, 0xa1, 0xfd, 0x92, 0x10, 0x1a, 0xa3, 0x70, 0x29, 0x48,
	0x85, 0x29, 0x3a, 0x15, 0x30, 0xee, 0xe5, 0xf7, 0x5f, 0xbf, 0x7f, 0xd4, 0x4e, 0x6f, 0xac, 0x97,
	0x6e, 0xdb, 0xdf, 0xf4, 0xcd, 0xd5, 0x23, 0x9f, 0xa1, 0x7b, 0x64, 0x84, 0x3c, 0x2c, 0xcd, 0x6b,
	0xa4, 0xef, 0x9c, 0x53, 0xcd, 0xbf, 0x7b, 0x61, 0xb6, 0x00, 0x72, 0xd0, 0x0f, 0x18, 0x74, 0xf2,
	0xf0, 0x15, 0x99, 0x42, 0x3b, 0x5f, 0x90, 0x67, 0xff, 0x9d, 0x52, 0xc5, 0x4d, 0x6f, 0x5b, 0x9f,
	0x1a, 0xba, 0x37, 0x6b, 0x19, 0xcf, 0x83, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x02, 0x59, 0x6c,
	0xf5, 0x66, 0x04, 0x00, 0x00,
}
