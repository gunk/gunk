# TODO: use [!net] once it does something useful.
# See https://github.com/rogpeppe/go-internal/issues/75.
[short] skip 'requires network access'

# Use a separate cache directory, to not reuse a cached protoc.
env GUNK_CACHE_DIR=$WORK/cache
! exists $GUNK_CACHE_DIR/gunk

# Specify a valid protoc version.
gunk generate ./version
exists $GUNK_CACHE_DIR/gunk/protoc-v3.8.0
exists version/all.pb.go

# Specify an invalid version
! gunk generate ./badversion
stderr 'downloading protoc: invalid version: invalid'
! exists badversion/all.pb.go

# Don't specify a path or version
gunk generate ./noversion
exists $GUNK_CACHE_DIR/gunk/protoc-v3.9.1 # default version
exists noversion/all.pb.go

# Specify the path where the first test's binary was downloaded to,
# but specify a different version
# copy the downloaded protoc-v3.8.0 to current directory to make
# pathversion/.gunkconfig work correctly across OSes
cp $GUNK_CACHE_DIR/gunk/protoc-v3.8.0 protoc-v3.8.0
! gunk generate ./pathversion
stderr 'want protoc version "v3.7.0" got "3.8.0"'
! exists pathversion/all.pb.go

-- go.mod --
module testdata.tld/util

-- .gunkconfig --
[generate]
command=protoc-gen-go
plugins=grpc

-- version/.gunkconfig --
[protoc]
version=v3.8.0

-- badversion/.gunkconfig --
[protoc]
version=invalid

-- noversion/.gunkconfig --

-- pathversion/.gunkconfig --
[protoc]
path=./protoc-v3.8.0
version=v3.7.0

-- version/version.gunk --
package version

type Message struct {
	Msg string `pb:"1"`
}

-- badversion/badversion.gunk --
package badversion

type Message struct {
	Msg string `pb:"1"`
}

-- noversion/noversion.gunk --
package noversion

type Message struct {
	Msg string `pb:"1"`
}

-- pathversion/pathversion.gunk --
package pathversion

type Message struct {
	Msg string `pb:"1"`
}
