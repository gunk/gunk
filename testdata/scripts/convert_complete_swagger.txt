env HOME=$WORK/home

gunk convert util.proto

grep '\+gunk openapiv2.Swagger' util.gunk
grep 'Swagger: "2.0"' util.gunk
grep 'Info: openapiv2.Info' util.gunk
grep 'Host' util.gunk
grep 'BasePath' util.gunk
grep 'Schemes: \[\]openapiv2.SwaggerScheme' util.gunk
grep 'Consumes: \[\]string' util.gunk
grep 'Produces: \[\]string' util.gunk
grep 'Responses: map\[string\]openapiv2.Response' util.gunk
grep 'SecurityDefinitions: openapiv2.SecurityDefinitions' util.gunk
grep 'ExternalDocs: openapiv2.ExternalDocumentation' util.gunk

-- util.proto --
syntax = "proto3";

package test;

import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  swagger: "2.0";
  base_path:"/v1";
  host: "brank.as";
	info: {
		title: "this is a title";
		version: "1.0";
		description: "this is a description"
		contact: {
			name: "gunk";
			url: "https://github.com/gunk/gunk";
			email: "none@example.com";
		};
		license: {
			name: "MIT License";
			url: "https://github.com/gunk/gunk/blob/master/LICENSE";
		};
	};
  external_docs: {
		url: "https://github.com/gunk/gunk";
		description: "More about gunk";
	}
  schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
  consumes: "application/json";
	consumes: "application/x-foo-mime";
	produces: "application/json";
	produces: "application/x-foo-mime";
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					title:"my title",
					ref: ".grpc.gateway.examples.examplepb.NumericEnum";
					multiple_of: 2;
					maximum: 10;
					exclusive_maximum: true;
					minimum: 1;
					exclusive_minimum: true;
					max_length: 10;
					min_length: 5;
					pattern: "test pattern";
					max_items: 10;
					min_items: 2;
					unique_items: true;
					max_properties: 100;
					min_properties: 50;
					required: ["name", "date"];
					array: ["arr1", "arr2"];
					type: STRING;
				},
				discriminator: "it's a discriminator",
				read_only:true,
				external_docs: {
					url: "https://github.com/gunk/gunk";
					description: "More about gunk 418";
				},
			}
		}
	}
  security_definitions: {
		security: {
			key: "BasicAuth";
			value: {
				type: TYPE_BASIC;
			}
		}
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "X-API-Key";
			}
		}
		security: {
			key: "OAuth2";
			value: {
				type: TYPE_OAUTH2;
				description: "this is a security scheme description";
				flow: FLOW_ACCESS_CODE;
				authorization_url: "https://example.com/oauth/authorize";
				token_url: "https://example.com/oauth/token";
				scopes: {
					scope: {
						key: "read";
						value: "Grants read access";
					}
					scope: {
						key: "write";
						value: "Grants write access";
					}
					scope: {
						key: "admin";
						value: "Grants read and write access to administrative information";
					}
				}
			}
		}
	}
};

// Message comment
message Message {
	string Name = 1;
}

service Service {
  rpc GetMessage(Message) returns (Message) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "Get message"
      summary : "Retrieves message"
      tags : "Message"
    };
    option (google.api.http) = {
      get : "/v1/message/{Name}"
    };
  }
}
