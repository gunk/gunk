gunk convert util.proto
cmp util.gunk util.gunk.golden

-- util.proto --
syntax = "proto3";

package test;

import "protoc-gen-swagger/options/annotations.proto";
import "google/api/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  swagger: "2.0";
  base_path:"/path";
  host: "brank.as";
	info: {
		title: "this is a title";
		version: "1.0";
		description: "this is a description"
		contact: {
			name: "gunk";
			url: "https://github.com/gunk/gunk";
			email: "none@example.com";
		};
		license: {
			name: "MIT License";
			url: "https://github.com/gunk/gunk/blob/master/LICENSE";
		};
	};
  external_docs: {
		url: "https://github.com/gunk/gunk";
		description: "More about gunk";
	}
  schemes: HTTP;
	schemes: HTTPS;
	schemes: WSS;
  consumes: "application/json";
	consumes: "application/x-foo-mime";
	produces: "application/json";
	produces: "application/x-foo-mime";
	responses: {
		key: "403";
		value: {
			description: "Returned when the user does not have permission to access the resource.";
		}
	}
	responses: {
		key: "404";
		value: {
			description: "Returned when the resource does not exist.";
			schema: {
				json_schema: {
					type: STRING;
				}
			}
		}
	}
	responses: {
		key: "418";
		value: {
			description: "I'm a teapot.";
			schema: {
				json_schema: {
					title:"my title",
					ref: ".grpc.gateway.examples.examplepb.NumericEnum";
					multiple_of: 2;
					maximum: 10;
					exclusive_maximum: true;
					minimum: 1;
					exclusive_minimum: true;
					max_length: 10;
					min_length: 5;
					pattern: "test pattern";
					max_items: 10;
					min_items: 2;
					unique_items: true;
					max_properties: 100;
					min_properties: 50;
					required: ["name", "date"];
					array: ["arr1", "arr2"];
					type: STRING;
				},
				discriminator: "it's a discriminator",
				read_only:true,
				external_docs: {
					url: "https://github.com/gunk/gunk";
					description: "More about gunk 418";
				},
			}
		}
	}
  security_definitions: {
		security: {
			key: "BasicAuth";
			value: {
				type: TYPE_BASIC;
			}
		}
		security: {
			key: "ApiKeyAuth";
			value: {
				type: TYPE_API_KEY;
				in: IN_HEADER;
				name: "X-API-Key";
			}
		}
		security: {
			key: "OAuth2";
			value: {
				type: TYPE_OAUTH2;
				description: "this is a security scheme description";
				flow: FLOW_ACCESS_CODE;
				authorization_url: "https://example.com/oauth/authorize";
				token_url: "https://example.com/oauth/token";
				scopes: {
					scope: {
						key: "read";
						value: "Grants read access";
					}
					scope: {
						key: "write";
						value: "Grants write access";
					}
					scope: {
						key: "admin";
						value: "Grants read and write access to administrative information";
					}
				}
			}
		}
	}
	security: {
        security_requirement: {
          key: "ApiKeyAuth";
          value: {
            scope:"update";
          }
        }
      }
};

// Message comment
message Message {
	string Name = 1;
}

service Service {
  rpc GetMessage(Message) returns (Message) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      description : "Get message"
      summary : "Retrieves message"
      tags : "Message"
    };
    option (google.api.http) = {
      get : "/v1/message/{Name}"
    };
  }
}
-- util.gunk.golden --
// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "this is a title",
//                 Description: "this is a description",
//                 Contact: openapiv2.Contact{
//                         Name:   "gunk",
//                         URL:    "https://github.com/gunk/gunk",
//                         Email:  "none@example.com",
//                 },
//                 License: openapiv2.License{
//                         Name:   "MIT License",
//                         URL:    "https://github.com/gunk/gunk/blob/master/LICENSE",
//                 },
//                 Version: "1.0",
//         },
//         Host:     "brank.as",
//         BasePath: "/path",
//         Schemes: []openapiv2.SwaggerScheme{
//                 openapiv2.HTTP,
//                 openapiv2.HTTPS,
//                 openapiv2.WSS,
//         },
//         Consumes: []string{
//                 "application/json",
//                 "application/x-foo-mime",
//         },
//         Produces: []string{
//                 "application/json",
//                 "application/x-foo-mime",
//         },
//         Responses: map[string]openapiv2.Response{
//                 "403": openapiv2.Response{
//                         Description: "Returned when the user does not have permission to access the resource.",
//                 },
//                 "404": openapiv2.Response{
//                         Description: "Returned when the resource does not exist.",
//                         Schema: openapiv2.Schema{
//                                 JSONSchema: openapiv2.JSONSchema{
//                                         Type: []openapiv2.JSONSchemaSimpleTypes{
//                                                 openapiv2.STRING,
//                                         },
//                                 },
//                         },
//                 },
//                 "418": openapiv2.Response{
//                         Description: "I'm a teapot.",
//                         Schema: openapiv2.Schema{
//                                 JSONSchema: openapiv2.JSONSchema{
//                                         Ref:              ".grpc.gateway.examples.examplepb.NumericEnum",
//                                         Title:            "my title",
//                                         MultipleOf:       2,
//                                         Maximum:          10,
//                                         ExclusiveMaximum: true,
//                                         Minimum:          1,
//                                         ExclusiveMinimum: true,
//                                         MaxLength:        10,
//                                         MinLength:        5,
//                                         Pattern:          "test pattern",
//                                         MaxItems:         10,
//                                         MinItems:         2,
//                                         UniqueItems:      true,
//                                         MaxProperties:    100,
//                                         MinProperties:    50,
//                                         Required: []string{
//                                                 "name",
//                                                 "date",
//                                         },
//                                         Array: []string{
//                                                 "arr1",
//                                                 "arr2",
//                                         },
//                                         Type: []openapiv2.JSONSchemaSimpleTypes{
//                                                 openapiv2.STRING,
//                                         },
//                                 },
//                                 Discriminator: "it's a discriminator",
//                                 ReadOnly:      true,
//                                 ExternalDocs: openapiv2.ExternalDocumentation{
//                                         Description: "More about gunk 418",
//                                         URL:         "https://github.com/gunk/gunk",
//                                 },
//                         },
//                 },
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                         "ApiKeyAuth": openapiv2.SecurityScheme{
//                                 Type:   openapiv2.TYPE_API_KEY,
//                                 Name:   "X-API-Key",
//                                 In:     openapiv2.IN_HEADER,
//                         },
//                         "BasicAuth": openapiv2.SecurityScheme{
//                                 Type: openapiv2.TYPE_BASIC,
//                         },
//                         "OAuth2": openapiv2.SecurityScheme{
//                                 Type:             openapiv2.TYPE_OAUTH2,
//                                 Description:      "this is a security scheme description",
//                                 Flow:             openapiv2.FLOW_ACCESS_CODE,
//                                 AuthorizationURL: "https://example.com/oauth/authorize",
//                                 TokenURL:         "https://example.com/oauth/token",
//                                 Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                 "admin": "Grants read and write access to administrative information",
//                                                 "read":  "Grants read access",
//                                                 "write": "Grants write access",
//                                         },
//                                 },
//                         },
//                 },
//         },
//         Security: []openapiv2.SecurityRequirement{
//                 {
//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
//                                 "ApiKeyAuth": openapiv2.SecurityRequirement_SecurityRequirementValue{
//                                         Scope: []string{
//                                                 "update",
//                                         },
//                                 },
//                         },
//                 },
//         },
//         ExternalDocs: openapiv2.ExternalDocumentation{
//                 Description: "More about gunk",
//                 URL:         "https://github.com/gunk/gunk",
//         },
// }
package test

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
	// "protoc-gen-swagger/options/annotations.proto"
	// "google/api/annotations.proto"
)

// Message comment
type Message struct {
	Name string `pb:"1" json:"name"`
}

type Service interface {
	// +gunk openapiv2.Operation{
	//         Tags: []string{
	//                 "Message",
	//         },
	//         Summary:     "Retrieves message",
	//         Description: "Get message",
	// }
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/message/{Name}",
	// }
	GetMessage(Message) Message
}
