gunk convert util.proto
cmp util.gunk util.gunk.golden

-- util.proto --
syntax = "proto3";

package util;

// Message comment
message Message {
	string Name = 1;
}

service Service {
  rpc GetMessage(Message) returns (Message) {
    option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
      tags : "tag 1"
      tags : "tag 2"
      summary : "Retrieves message"
      description : "Get message"
      external_docs: {
        url: "https://github.com/grpc-ecosystem/grpc-gateway";
        description: "Find out more about GetQuery";
      }
      operation_id:"operation_id"
      consumes: "application/json"
      produces: "application/xml"
      responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
        }
      }
      schemes: "scheme 1"
      schemes: "scheme 2"
      deprecated: true
      security: {
				security_requirement: {
          key: "empty";
          value: {
					}
        }
        security_requirement: {
          key: "ApiKeyAuth";
          value: {
						scope: "update";
					}
        }
        security_requirement: {
          key: "OAuth2";
          value: {
            scope: "read";
            scope: "write";
          }
        }
      }
    };
    option (google.api.http) = {
      get : "/v1/message/{Name}"
    };
  }
}

-- util.gunk.golden --
package util

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

// Message comment
type Message struct {
	Name string `pb:"1" json:"name"`
}

type Service interface {
	// +gunk openapiv2.Operation{
	//         Tags: []string{
	//                 "tag 1",
	//                 "tag 2",
	//         },
	//         Summary:     "Retrieves message",
	//         Description: "Get message",
	//         ExternalDocs: openapiv2.ExternalDocumentation{
	//                 Description: "Find out more about GetQuery",
	//                 URL:         "https://github.com/grpc-ecosystem/grpc-gateway",
	//         },
	//         OperationID: "operation_id",
	//         Consumes: []string{
	//                 "application/json",
	//         },
	//         Produces: []string{
	//                 "application/xml",
	//         },
	//         Responses: map[string]openapiv2.Response{
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource does not exist.",
	//                 },
	//         },
	//         Schemes: []string{
	//                 "scheme 1",
	//                 "scheme 2",
	//         },
	//         Deprecated: true,
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "ApiKeyAuth": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "update",
	//                                         },
	//                                 },
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "read",
	//                                                 "write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/message/{Name}",
	// }
	GetMessage(Message) Message
}
