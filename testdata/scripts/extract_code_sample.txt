gunk generate accounts.gunk
cmp messages.pot messages.pot.golden
cmp all.md all.md.golden

-- go.mod --
module testdata.tld/util

require (
	github.com/gunk/opt v0.0.0-20190514110406-385321f21939
)
-- .gunkconfig --
[generate]
command=docgen
lang=go
-- get_account.go --
import apb "github.com/openbank/gunk/gunk/v1/accounts"

// Create a connection with TLS credentials.
cc, err := grpc.Dial(
	grpcAddr,
	grpc.WithTransportCredentials(creds),
)
if err != nil {
	return nil, err
}

// Create a client to Account API.
c := apb.NewAccountServiceClient(cc)

// Get the account.
acc, err := c.GetAccount(
	ctx,
	&apb.GetAccountRequest{
		ID: "123",
	})

-- accounts.gunk --
// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "Accounts API",
//                 Description: "Provides CRUD operations on the accounts resource.",
//                 Version:     "1.0.0",
//         },
//		   Host: "https://openbank.com",
//         BasePath: "/v1",
// }
package accounts

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

// Account holds all details about a bank account.
type Account struct {
	// AccountID is the unique identifier of an account.
	// Should not be returned as is.
	AccountID string `pb:"1" json:"account_id"`
	// TODO: add comment.
	Branch string `pb:"2" json:"branch"`
	// TODO: add comment.
	BranchName string `pb:"3" json:"branch_name"`
	// Status is the status of the account.
	Status string `pb:"4" json:"status"`
	// TODO: add comment.
	AccruedInterestAtMaturityDate string `pb:"5" json:"accrued_interest_at_maturity_date"`
	// TODO: add comment.
	AvailableCreditLimit string `pb:"8" json:"available_credit_limit"`
	// TODO: add comment.
	CheckingInterestRate string `pb:"9" json:"checking_interest_rate"`
	// ContractDate is the date of the contract initialization.
	ContractDate string `pb:"10" json:"contract_date"`
	// CreditLimit is the allowed credit limit.
	CreditLimit string `pb:"11" json:"credit_limit"`
	// TODO: add comment.
	CurrentAccruedInterest string `pb:"12" json:"current_accrued_interest"`
	// CurrentTerm is the account validity period.
	CurrentTerm string `pb:"14" json:"current_term"`
	// DueDate is the loan maturity date.
	DueDate string `pb:"15" json:"due_date"`
	// TODO: add comment.
	InterestRate string `pb:"16" json:"interest_rate"`
	// MaturityDate is the maturity date, format is ISO 8601
	MaturityDate string `pb:"19" json:"maturity_date"`
	// TODO: add comment.
	NextPaymentDueDate string `pb:"20" json:"next_payment_due_date"`
	// OwnerName is the name of the account's owner.
	OwnerName string `pb:"21" json:"owner_name"`
	// TODO: add comment.
	StartDate string `pb:"22" json:"start_date"`
}

// GetAccountRequest is the request envelope to get an account by its identifier.
type GetAccountRequest struct {
	AccountID string `pb:"1" json:"account_id"`
}

// EntityType describes the type of the entity.
type EntityType int

const (
	_ EntityType = iota
	// Pers is an individual customer.
	Pers
	// Org is an organisation customer.
	Org
)

// TODO: add comment.
type AccountRole struct {
	// TODO: add comment.
	EntityNumber string `pb:"1" json:"entity_number"`
	// TODO: add comment.
	EntityType EntityType `pb:"2" json:"entity_type"`
	// TODO: add comment.
	Role string `pb:"3" json:"role"`
}

// TODO: add comment.
type DebitTransaction struct {
	// TODO: add comment.
	Amount string `pb:"1" json:"amount"`
	// TODO: add comment.
	DebitAccount string `pb:"2" json:"debit_account"`
	// TODO: add comment.
	ExchangeRate string `pb:"3" json:"exchange_rate"`
	// TODO: add comment.
	IsFx bool `pb:"4" json:"is_fx"`
}

// UpdateAccountRequest wraps all fields available for update.
type UpdateAccountRequest struct {
	// AccountID is the unique identifier of the account to update.
	AccountID string `pb:"1" json:"account_id"`
	// TODO: add comment.
	Description string `pb:"2" json:"description"`
}

// DeleteAccountRequest is the request envelope to delete an account.
type DeleteAccountRequest struct {
	// AccountID is the unique identifier of the account to delete.
	AccountID string `pb:"1" json:"account_id"`
}

// AccountService provides Account operations.
type AccountService interface {
	// GetAccount retrieves the detail of an account, selected by its id.
	//
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/accounts/{AccountID}",
	// }
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Account"},
	//         Description: "Retrieves all data from an account, selected by the account_id you supplied.",
	//         Summary:     "Retrieve an account",
	//         Responses: map[string]openapiv2.Response{
	//                 "200": openapiv2.Response{
	//                         Description: "Request executed successfully.",
	//                         Schema: openapiv2.Schema{
	//                                 JSONSchema: openapiv2.JSONSchema{
	//                                         Ref: "#/definitions/accountsAccount",
	//                                 },
	//                         },
	//                 },
	//                 "404": openapiv2.Response{
	//                         Description: "Returned when the resource is not found.",
	//                 },
	//         },
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetAccount(GetAccountRequest) Account
}

-- messages.pot.golden --
# Messages.pot - Contains all msgid extracted from swagger definitions.
# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid   ""
msgstr  "Project-Id-Version: %s\n"
		"Report-Msgid-Bugs-To: %s\n"
		"POT-Creation-Date: %s\n"
		"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
		"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
		"Language-Team: LANGUAGE <LL@li.org>\n"
		"Language: \n"
		"MIME-Version: 1.0\n"
		"Content-Type: text/plain; charset=CHARSET\n"
		"Content-Transfer-Encoding: 8bit\n"

msgid "AccountID is the unique identifier of an account.Should not be returned as is."
msgstr ""

msgid "Accounts API"
msgstr ""

msgid "Annex"
msgstr ""

msgid "Base Path"
msgstr ""

msgid "ContractDate is the date of the contract initialization."
msgstr ""

msgid "CreditLimit is the allowed credit limit."
msgstr ""

msgid "CurrentTerm is the account validity period."
msgstr ""

msgid "DueDate is the loan maturity date."
msgstr ""

msgid "EntityType describes the type of the entity."
msgstr ""

msgid "EntityType_Org is an organisation customer."
msgstr ""

msgid "EntityType_Pers is an individual customer."
msgstr ""

msgid "HTTP Request"
msgstr ""

msgid "Host"
msgstr ""

msgid "MaturityDate is the maturity date, format is ISO 8601"
msgstr ""

msgid "OwnerName is the name of the account's owner."
msgstr ""

msgid "Provides CRUD operations on the accounts resource."
msgstr ""

msgid "Query Parameters"
msgstr ""

msgid "Request executed successfully."
msgstr ""

msgid "Response body"
msgstr ""

msgid "Response codes"
msgstr ""

msgid "Responses"
msgstr ""

msgid "Retrieve an account"
msgstr ""

msgid "Retrieves all data from an account, selected by the account_id you supplied."
msgstr ""

msgid "Returned when the resource is not found."
msgstr ""

msgid "Status is the status of the account."
msgstr ""

msgid "TODO: add comment."
msgstr ""

msgid "USE_YOUR_TOKEN"
msgstr ""
-- all.md.golden --

# Accounts API v1.0.0

Provides CRUD operations on the accounts resource.  
* Host `https://openbank.com`  
* Base Path `/v1`

## Retrieve an account

Retrieves all data from an account, selected by the account_id you supplied.

```sh
curl -X GET \
	https://openbank.com/v1/accounts/{AccountID} \
	-H 'Authorization: Bearer USE_YOUR_TOKEN'
```
```go
import apb "github.com/openbank/gunk/gunk/v1/accounts"

// Create a connection with TLS credentials.
cc, err := grpc.Dial(
	grpcAddr,
	grpc.WithTransportCredentials(creds),
)
if err != nil {
	return nil, err
}

// Create a client to Account API.
c := apb.NewAccountServiceClient(cc)

// Get the account.
acc, err := c.GetAccount(
	ctx,
	&apb.GetAccountRequest{
		ID: "123",
	})
```
### HTTP Request

`GET https://openbank.com/v1/accounts/{AccountID}`

### Query Parameters

| Name      | Type   | Description |
|-----------|--------|-------------|
| AccountID | string |             |

### Responses

#### Response body

| Name                          | Type   | Description                                                                    |
|-------------------------------|--------|--------------------------------------------------------------------------------|
| AccountID                     | string | AccountID is the unique identifier of an account.Should not be returned as is. |
| Branch                        | string | TODO: add comment.                                                             |
| BranchName                    | string | TODO: add comment.                                                             |
| Status                        | string | Status is the status of the account.                                           |
| AccruedInterestAtMaturityDate | string | TODO: add comment.                                                             |
| AvailableCreditLimit          | string | TODO: add comment.                                                             |
| CheckingInterestRate          | string | TODO: add comment.                                                             |
| ContractDate                  | string | ContractDate is the date of the contract initialization.                       |
| CreditLimit                   | string | CreditLimit is the allowed credit limit.                                       |
| CurrentAccruedInterest        | string | TODO: add comment.                                                             |
| CurrentTerm                   | string | CurrentTerm is the account validity period.                                    |
| DueDate                       | string | DueDate is the loan maturity date.                                             |
| InterestRate                  | string | TODO: add comment.                                                             |
| MaturityDate                  | string | MaturityDate is the maturity date, format is ISO 8601                          |
| NextPaymentDueDate            | string | TODO: add comment.                                                             |
| OwnerName                     | string | OwnerName is the name of the account's owner.                                  |
| StartDate                     | string | TODO: add comment.                                                             |

<!-- TODO: add example -->
#### Response codes

| Status | Description                              |
|--------|------------------------------------------|
| 200    | Request executed successfully.           |
| 404    | Returned when the resource is not found. |

## Annex

####  EntityType

EntityType describes the type of the entity.

| Value | Description                                 |
|-------|---------------------------------------------|
| Pers  | EntityType_Pers is an individual customer.  |
| Org   | EntityType_Org is an organisation customer. |

