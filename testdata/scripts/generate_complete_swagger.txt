cp echo.gunk json_names_for_fields_disabled/echo.gunk
cp echo.gunk json_names_for_fields_enabled/echo.gunk
rm echo.gunk
gunk generate -v ./...
cmp json_names_for_fields_disabled/all.swagger.json json_names_for_fields_disabled/all.swagger.json.golden
cmp json_names_for_fields_enabled/all.swagger.json json_names_for_fields_enabled/all.swagger.json.golden

-- go.mod --
module testdata.tld/util

require (
	github.com/gunk/opt v0.0.0-20190514110406-385321f21939
)

-- json_names_for_fields_disabled/.gunkconfig --
[generate swagger]

-- json_names_for_fields_disabled/all.swagger.json.golden --
{
  "swagger": "2.0",
  "info": {
    "title": "this is a title",
    "description": "this is a description",
    "version": "1.0",
    "contact": {
      "name": "gunk",
      "url": "https://github.com/gunk/gunk",
      "email": "none@example.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://github.com/gunk/gunk/blob/master/LICENSE"
    }
  },
  "host": "brank.as",
  "basePath": "/path",
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "consumes": [
    "application/json",
    "application/x-foo-mime"
  ],
  "produces": [
    "application/json",
    "application/x-foo-mime"
  ],
  "paths": {
    "/v1/message/{Name}": {
      "get": {
        "summary": "Retrieves message",
        "description": "Get message",
        "operationId": "Service_GetMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testMessage"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {
              "type": "string",
              "$ref": ".grpc.gateway.examples.examplepb.NumericEnum",
              "title": "my title",
              "externalDocs": {
                "description": "More about gunk 418",
                "url": "https://github.com/gunk/gunk"
              },
              "multipleOf": 2,
              "maximum": 10,
              "exclusiveMaximum": true,
              "minimum": 1.3,
              "exclusiveMinimum": true,
              "maxLength": 10,
              "minLength": 5,
              "pattern": "test pattern",
              "maxItems": 10,
              "minItems": 2,
              "uniqueItems": true,
              "maxProperties": 100,
              "minProperties": 50,
              "required": [
                "name",
                "date"
              ]
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "Name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "AnotherField",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "type_url": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "testMessage": {
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "AnotherField": {
          "type": "string"
        }
      },
      "title": "Message comment"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    },
    "BasicAuth": {
      "type": "basic"
    },
    "OAuth2": {
      "type": "oauth2",
      "description": "this is a security scheme description",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/oauth/authorize",
      "tokenUrl": "https://example.com/oauth/token",
      "scopes": {
        "admin": "Grants read and write access to administrative information",
        "read": "Grants read access",
        "write": "Grants write access"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": [
        "update"
      ]
    }
  ],
  "externalDocs": {
    "description": "More about gunk",
    "url": "https://github.com/gunk/gunk"
  }
}
-- json_names_for_fields_enabled/.gunkconfig --
[generate swagger]
json_names_for_fields=true

-- json_names_for_fields_enabled/all.swagger.json.golden --
{
  "swagger": "2.0",
  "info": {
    "title": "this is a title",
    "description": "this is a description",
    "version": "1.0",
    "contact": {
      "name": "gunk",
      "url": "https://github.com/gunk/gunk",
      "email": "none@example.com"
    },
    "license": {
      "name": "MIT License",
      "url": "https://github.com/gunk/gunk/blob/master/LICENSE"
    }
  },
  "host": "brank.as",
  "basePath": "/path",
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "consumes": [
    "application/json",
    "application/x-foo-mime"
  ],
  "produces": [
    "application/json",
    "application/x-foo-mime"
  ],
  "paths": {
    "/v1/message/{name}": {
      "get": {
        "summary": "Retrieves message",
        "description": "Get message",
        "operationId": "Service_GetMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/testMessage"
            }
          },
          "403": {
            "description": "Returned when the user does not have permission to access the resource.",
            "schema": {}
          },
          "404": {
            "description": "Returned when the resource does not exist.",
            "schema": {
              "type": "string",
              "format": "string"
            }
          },
          "418": {
            "description": "I'm a teapot.",
            "schema": {
              "type": "string",
              "$ref": ".grpc.gateway.examples.examplepb.NumericEnum",
              "title": "my title",
              "externalDocs": {
                "description": "More about gunk 418",
                "url": "https://github.com/gunk/gunk"
              },
              "multipleOf": 2,
              "maximum": 10,
              "exclusiveMaximum": true,
              "minimum": 1.3,
              "exclusiveMinimum": true,
              "maxLength": 10,
              "minLength": 5,
              "pattern": "test pattern",
              "maxItems": 10,
              "minItems": 2,
              "uniqueItems": true,
              "maxProperties": 100,
              "minProperties": 50,
              "required": [
                "name",
                "date"
              ]
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/runtimeError"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "another_field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Message"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string"
        },
        "value": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "runtimeError": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        },
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "testMessage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "another_field": {
          "type": "string"
        }
      },
      "title": "Message comment"
    }
  },
  "securityDefinitions": {
    "ApiKeyAuth": {
      "type": "apiKey",
      "name": "X-API-Key",
      "in": "header"
    },
    "BasicAuth": {
      "type": "basic"
    },
    "OAuth2": {
      "type": "oauth2",
      "description": "this is a security scheme description",
      "flow": "accessCode",
      "authorizationUrl": "https://example.com/oauth/authorize",
      "tokenUrl": "https://example.com/oauth/token",
      "scopes": {
        "admin": "Grants read and write access to administrative information",
        "read": "Grants read access",
        "write": "Grants write access"
      }
    }
  },
  "security": [
    {
      "ApiKeyAuth": [
        "update"
      ]
    }
  ],
  "externalDocs": {
    "description": "More about gunk",
    "url": "https://github.com/gunk/gunk"
  }
}
-- echo.gunk --
// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title:       "this is a title",
//                 Description: "this is a description",
//                 Contact: openapiv2.Contact{
//                         Name:   "gunk",
//                         URL:    "https://github.com/gunk/gunk",
//                         Email:  "none@example.com",
//                 },
//                 License: openapiv2.License{
//                         Name:   "MIT License",
//                         URL:    "https://github.com/gunk/gunk/blob/master/LICENSE",
//                 },
//                 Version: "1.0",
//         },
//         Host:     "brank.as",
//         BasePath: "/path",
//         Schemes: []openapiv2.SwaggerScheme{
//                 openapiv2.HTTP,
//                 openapiv2.HTTPS,
//                 openapiv2.WSS,
//         },
//         Consumes: []string{
//                 "application/json",
//                 "application/x-foo-mime",
//         },
//         Produces: []string{
//                 "application/json",
//                 "application/x-foo-mime",
//         },
//         Responses: map[string]openapiv2.Response{
//                 "403": openapiv2.Response{
//                         Description: "Returned when the user does not have permission to access the resource.",
//                 },
//                 "404": openapiv2.Response{
//                         Description: "Returned when the resource does not exist.",
//                         Schema: openapiv2.Schema{
//                                 JSONSchema: openapiv2.JSONSchema{
//                                         Type: []openapiv2.JSONSchemaSimpleTypes{
//                                                 openapiv2.STRING,
//                                         },
//                                 },
//                         },
//                 },
//                 "418": openapiv2.Response{
//                         Description: "I'm a teapot.",
//                         Schema: openapiv2.Schema{
//                                 JSONSchema: openapiv2.JSONSchema{
//                                         Ref:              ".grpc.gateway.examples.examplepb.NumericEnum",
//                                         Title:            "my title",
//                                         MultipleOf:       2,
//                                         Maximum:          10,
//                                         ExclusiveMaximum: true,
//                                         Minimum:          1.3,
//                                         ExclusiveMinimum: true,
//                                         MaxLength:        10,
//                                         MinLength:        5,
//                                         Pattern:          "test pattern",
//                                         MaxItems:         10,
//                                         MinItems:         2,
//                                         UniqueItems:      true,
//                                         MaxProperties:    100,
//                                         MinProperties:    50,
//                                         Required: []string{
//                                                 "name",
//                                                 "date",
//                                         },
//                                         Array: []string{
//                                                 "arr1",
//                                                 "arr2",
//                                         },
//                                         Type: []openapiv2.JSONSchemaSimpleTypes{
//                                                 openapiv2.STRING,
//                                         },
//                                 },
//                                 Discriminator: "it's a discriminator",
//                                 ReadOnly:      true,
//                                 ExternalDocs: openapiv2.ExternalDocumentation{
//                                         Description: "More about gunk 418",
//                                         URL:         "https://github.com/gunk/gunk",
//                                 },
//                         },
//                 },
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                         "ApiKeyAuth": openapiv2.SecurityScheme{
//                                 Type:   openapiv2.TYPE_API_KEY,
//                                 Name:   "X-API-Key",
//                                 In:     openapiv2.IN_HEADER,
//                         },
//                         "BasicAuth": openapiv2.SecurityScheme{
//                                 Type: openapiv2.TYPE_BASIC,
//                         },
//                         "OAuth2": openapiv2.SecurityScheme{
//                                 Type:             openapiv2.TYPE_OAUTH2,
//                                 Description:      "this is a security scheme description",
//                                 Flow:             openapiv2.FLOW_ACCESS_CODE,
//                                 AuthorizationURL: "https://example.com/oauth/authorize",
//                                 TokenURL:         "https://example.com/oauth/token",
//                                 Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                 "admin": "Grants read and write access to administrative information",
//                                                 "read":  "Grants read access",
//                                                 "write": "Grants write access",
//                                         },
//                                 },
//                         },
//                 },
//         },
//         Security: []openapiv2.SecurityRequirement{
//                 {
//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
//                                 "ApiKeyAuth": openapiv2.SecurityRequirement_SecurityRequirementValue{
//                                         Scope: []string{
//                                                 "update",
//                                         },
//                                 },
//                         },
//                 },
//         },
//         ExternalDocs: openapiv2.ExternalDocumentation{
//                 Description: "More about gunk",
//                 URL:         "https://github.com/gunk/gunk",
//         },
// }
package test

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

// Message comment
type Message struct {
	Name string `pb:"1" json:"name"`
	AnotherField string `pb:"2" json:"another_field"`
}

type Service interface {
	// +gunk openapiv2.Operation{
	//         Tags:        []string{"Message"},
	//         Description: "Get message",
	//         Summary:     "Retrieves message",
	// }
	// +gunk http.Match{
	//         Method: "GET",
	//         Path:   "/v1/message/{Name}",
	// }
	GetMessage(Message) Message
}
