gunk generate -v echo.gunk
exec go build all.scopes.go
cmp all.scopes.json all.scopes.json.golden
cmp all.scopes.go all.scopes.go.golden
-- go.mod --
module testdata.tld/util

require (
	github.com/gunk/opt v0.0.0-20210314081614-a3a255ac0fd8
)
-- go.sum --
github.com/gunk/opt v0.0.0-20210314081614-a3a255ac0fd8 h1:PhTyXTMyebFm+ti5Wk4+Zam9D0OjVDPPlmfQicRuF8k=
github.com/gunk/opt v0.0.0-20210314081614-a3a255ac0fd8/go.mod h1:Nn3H/M7L2O6MpSAlo2bW57c8QvPiV6LHYd3nhYGYkRI=
-- .gunkconfig --
[generate]
command=scopegen
go=true
json=true
-- echo.gunk --
package test

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

// Message comment
type Message struct {
	Name string `pb:"1" json:"name"`
}

type Service interface {
	GetMessage(Message) Message
}
-- all.scopes.json.golden --
{}
-- all.scopes.go.golden --
// Code generated by "scopegen"; DO NOT EDIT.
package test

type (
	AuthScope    string
	ServiceScope struct{}
)

var authScopes = map[string][]AuthScope{}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc ServiceScope) Any(method string, claims []string) bool {
	ch := authScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc ServiceScope) All(method string, claims []string) bool {
	ch := authScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
