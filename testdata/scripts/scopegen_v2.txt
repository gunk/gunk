gunk generate -v echo.gunk
exec go build all.scopes.go
cmp all.scopes.json all.scopes.json.golden
cmp all.scopes.go all.scopes.go.golden
-- go.mod --
module testdata.tld/util

require (
	github.com/gunk/opt v0.0.0-20190514110406-385321f21939
)
-- .gunkconfig --
[generate]
command=scopegen
go=true
json=true
output_version=2
-- echo.gunk --
// +gunk openapiv2.Swagger{
//         Swagger: "2.0",
//         Info: openapiv2.Info{
//                 Title: "this is a title",
//         },
//         SecurityDefinitions: openapiv2.SecurityDefinitions{
//                 Security: map[string]openapiv2.SecurityScheme{
//                          "OAuth2": openapiv2.SecurityScheme{
//                                  Type: openapiv2.TYPE_OAUTH2,
//                                  Scopes: openapiv2.Scopes{
//                                         Scope: map[string]string{
//                                                  "admin": "Grants read and write access to administrative information",
//                                                  "read":  "Grants read access",
//                                                  "write": "Grants write access",
//                                         },
//                                  },
//                          },
//                 },
//         },
// }
package test

import (
	"github.com/gunk/opt/http"
	"github.com/gunk/opt/openapiv2"
)

// Message comment
type Message struct {
	Name string `pb:"1" json:"name"`
}

type Service interface {
	// +gunk openapiv2.Operation{
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "read",
	//                                                 "write",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetMessage(Message) Message

	GetMessage2(Message) Message

	// +gunk openapiv2.Operation{
	//         Security: []openapiv2.SecurityRequirement{
	//                 {
	//                         SecurityRequirement: map[string]openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                 "OAuth2": openapiv2.SecurityRequirement_SecurityRequirementValue{
	//                                         Scope: []string{
	//                                                 "read",
	//                                         },
	//                                 },
	//                         },
	//                 },
	//         },
	// }
	GetMessage3(Message) Message
}
-- all.scopes.json.golden --
{"scopes":{"admin":"Grants read and write access to administrative information","read":"Grants read access","write":"Grants write access"},"auth_scopes":{"/test.Service/GetMessage":["read","write"],"/test.Service/GetMessage3":["read"]}}
-- all.scopes.go.golden --
// Code generated by "scopegen"; DO NOT EDIT.
package test

type ServiceScope struct{}

var Scopes = map[string]string{
	"admin": "Grants read and write access to administrative information",
	"read": "Grants read access",
	"write": "Grants write access",
}

var AuthScopes = map[string][]string{
	"/test.Service/GetMessage": []string{"read", "write"},
	"/test.Service/GetMessage3": []string{"read"},
}

// Any allows a loose challenge, for claims containing any of the method scopes.
//
// Use All method as a default for OAuth2 style scopes.  Any is useful with more complex scope definitions.
func (svcSc *ServiceScope) Any(method string, claims []string) bool {
	ch := AuthScopes[method]
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				return true
			}
		}
	}
	return len(ch) == 0
}

// All is the default OAuth2 challenge method, ensuring claims contains all method scopes.
func (svcSc *ServiceScope) All(method string, claims []string) bool {
	ch := AuthScopes[method]
	if len(ch) > len(claims) {
		return false
	}
scopes:
	for _, s := range ch {
		for _, c := range claims {
			if string(s) == c {
				continue scopes
			}
		}
		return false
	}
	return true
}
